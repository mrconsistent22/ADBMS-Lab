ADBMS ASSIGNMENT 2(A)(Aggregation & Indexes)

TE IT 

3081

TEJAS SHINDE



Windows PowerShell

Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\\Users\\ASUS\\Desktop> mongosh

Current Mongosh Log ID: 68ec08d0a13edce2c2718dc3

Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true\&serverSelectionTimeoutMS=2000\&appName=mongosh+2.5.5

Using MongoDB:          8.0.11

Using Mongosh:          2.5.5

mongosh 2.5.8 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

------

&nbsp;  The server generated these startup warnings when booting

&nbsp;  2025-10-01T10:22:48.059+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted

------

test> use company

switched to db company

company> db.createCollection("customer")

{ ok: 1 }

company> db.customer.insertOne({"custID": "A123", "Amount":500,"status": "A" })

{

&nbsp; acknowledged: true,

&nbsp; insertedId: ObjectId('68ec0979a13edce2c2718dc4')

}

company> db.customer.insertOne({ "custID": "A123", "Amount": 250, "status": "A" })

{

&nbsp; acknowledged: true,

&nbsp; insertedId: ObjectId('68ec0992a13edce2c2718dc5')

}

company> db.customer.insertOne({ "custID": "B212", "Amount": 200, "status": "A" })

{

&nbsp; acknowledged: true,

&nbsp; insertedId: ObjectId('68ec09a5a13edce2c2718dc6')

}

company> db.customer.insertOne({ "custID": "A123", "Amount": 300, "status": "D" });

{

&nbsp; acknowledged: true,

&nbsp; insertedId: ObjectId('68ec09b2a13edce2c2718dc7')

}



PART-A


a) Find the total amount of each customer.

company> db.customer.aggregate(\[{$group:{\_id:"$custID",totalAmount:{$sum:"$Amount"}}}])

\[

&nbsp; { \_id: 'B212', totalAmount: 200 },

&nbsp; { \_id: 'A123', totalAmount: 1050 }

]


b) Find the total amount of each customer whose status is A.

company> db.customer.aggregate(\[{$match:{status:"A"}},{$group:{\_id:"$custID",totalAmount:{$sum:"$Amount"}}}])

\[

&nbsp; { \_id: 'B212', totalAmount: 200 },

&nbsp; { \_id: 'A123', totalAmount: 750 }

]


c) Find the minimum total amount of each customer whose Status is A.

company> db.customer.aggregate(\[{$match:{status:"A"}},{$group:{\_id:"$custID",minAmount:{$min:"$Amount"}}}])

\[ { \_id: 'B212', minAmount: 200 }, { \_id: 'A123', minAmount: 250 } ]


d) Find the maximum total amount of each customer whose Status is A.

company> db.customer.aggregate(\[{$match:{status:"A"}},{$group:{\_id:"$custID",maxAmount:{$max:"$Amount"}}}])

\[ { \_id: 'A123', maxAmount: 500 }, { \_id: 'B212', maxAmount: 200 } ]


e) Find the average total amount of each customer whose Status is A.

company> db.customer.aggregate(\[{$match:{status:"A"}},{$group:{\_id:"$custID",avgAmount:{$avg:"$Amount"}}}])

\[ { \_id: 'B212', avgAmount: 200 }, { \_id: 'A123', avgAmount: 375 } ]


PART-B


f) Create index on custID.

company> db.customer.createIndex({custID:1})

custID\_1


g) Execute getIndexes.

company> db.customer.getIndexes()

\[

&nbsp; { v: 2, key: { \_id: 1 }, name: '\_id\_' },

&nbsp; { v: 2, key: { custID: 1 }, name: 'custID\_1' }

]


h) Drop the index created.

company> db.customer.dropIndex("custID\_1")

{ nIndexesWas: 2, ok: 1 }

